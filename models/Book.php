<?php

namespace app\models;

use app\utils\SMSPilot;
use Yii;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "book".
 *
 * @property int $id
 * @property string|null $name
 * @property int|null $created
 * @property string|null $about
 * @property string|null $isbn
 * @property string|null $photo
 *
 * @property BookAuthors[] $bookAuthors
 */
class Book extends \yii\db\ActiveRecord
{
    public $authors = [];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'book';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['created'], 'integer'],
            [['name', 'about', 'isbn'], 'string', 'max' => 255],
            [['authors'], 'default', 'value' => []],
            [['photo'], 'file', 'skipOnEmpty' => true, 'extensions' => 'png, jpg'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'created' => 'Created',
            'about' => 'About',
            'isbn' => 'Isbn',
            'photo' => 'Photo',
        ];
    }

    /**
     * Gets query for [[BookAuthors]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBookAuthors()
    {
        return $this->hasMany(BookAuthors::class, ['id_book' => 'id']);
    }

    public function getAuthors()
    {
        return $this->hasMany(Author::class, ['id' => 'id_author'])->via('bookAuthors');
    }

    public function beforeSave($insert)
    {
        $this->photo = 'uploads/' . $this->id;
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $oldAuthors = ArrayHelper::getColumn($this->bookAuthors, 'id_author');
        $newAuthors = array_diff($this->authors, $oldAuthors);
        if (!empty($newAuthors)) {
            $this->sendNotifications($newAuthors);
        }

        if (!$this->isNewRecord) {
            $this->unlinkAll('bookAuthors', true);
        }

        foreach ($this->authors as $id_author) {
            $model = new BookAuthors([
                'id_book' => $this->id,
                'id_author' => $id_author
            ]);
            $this->link('bookAuthors', $model);
        }

        $photo = UploadedFile::getInstance($this, 'photo');
        if (!empty($photo)) {
            $photo->saveAs('uploads/' . $this->id);
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        parent::afterFind();
        $this->authors = ArrayHelper::getColumn($this->bookAuthors, 'id_author');
    }

    public function beforeDelete()
    {
        $path = Yii::getAlias('@webroot') . '/uploads/' . $this->id;
        if (file_exists($path)) {
            unlink($path);
        }
        parent::beforeDelete();  // TODO: Change the autogenerated stub
    }

    private function sendNotifications(array $authors)
    {
        foreach ($authors as $author_id) {
            $subscribers = Subscribers::find()->where(['id_author' => $author_id])->all();
            foreach ($subscribers as $subscriber) {
                $sms = new SMSPilot('XXXXXXXXXXXXYYYYYYYYYYYYZZZZZZZZXXXXXXXXXXXXYYYYYYYYYYYYZZZZZZZZ');
                $sms->send($subscriber->phone, 'A new book has been published! ' . $this->name);
            }
        }
    }

}
